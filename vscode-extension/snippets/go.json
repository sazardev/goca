{
    "Goca Entity": {
        "prefix": "goca-entity",
        "body": [
            "package domain",
            "",
            "import (",
            "\t\"time\"",
            "\t\"errors\"",
            ")",
            "",
            "// ${1:Entity} representa una entidad ${2:descripción}",
            "type ${1:Entity} struct {",
            "\tID        string    `json:\"id\"`",
            "\t${3:Name}      string    `json:\"${4:name}\"`",
            "\tCreatedAt time.Time `json:\"created_at\"`",
            "\tUpdatedAt time.Time `json:\"updated_at\"`",
            "}",
            "",
            "// Validate valida los campos de ${1:Entity}",
            "func (e *${1:Entity}) Validate() error {",
            "\tif e.${3:Name} == \"\" {",
            "\t\treturn errors.New(\"${4:name} no puede estar vacío\")",
            "\t}",
            "\treturn nil",
            "}",
            ""
        ],
        "description": "Crear una entidad de dominio con validación"
    },
    "Goca Repository Interface": {
        "prefix": "goca-repo-interface",
        "body": [
            "package repository",
            "",
            "import (",
            "\t\"context\"",
            "\t\"${1:github.com/usuario/proyecto}/internal/domain\"",
            ")",
            "",
            "// ${2:Entity}Repository define las operaciones del repositorio para ${2:Entity}",
            "type ${2:Entity}Repository interface {",
            "\tCreate(ctx context.Context, ${3:entity} *domain.${2:Entity}) error",
            "\tGetByID(ctx context.Context, id string) (*domain.${2:Entity}, error)",
            "\tUpdate(ctx context.Context, ${3:entity} *domain.${2:Entity}) error",
            "\tDelete(ctx context.Context, id string) error",
            "\tList(ctx context.Context, limit, offset int) ([]*domain.${2:Entity}, error)",
            "}",
            ""
        ],
        "description": "Crear una interfaz de repositorio"
    },
    "Goca UseCase Interface": {
        "prefix": "goca-usecase-interface",
        "body": [
            "package usecase",
            "",
            "import (",
            "\t\"context\"",
            ")",
            "",
            "// ${1:Entity}UseCase define las operaciones del caso de uso para ${1:Entity}",
            "type ${1:Entity}UseCase interface {",
            "\tCreate(ctx context.Context, input Create${1:Entity}Input) (*Create${1:Entity}Output, error)",
            "\tGet(ctx context.Context, id string) (*Get${1:Entity}Output, error)",
            "\tUpdate(ctx context.Context, input Update${1:Entity}Input) (*Update${1:Entity}Output, error)",
            "\tDelete(ctx context.Context, id string) error",
            "\tList(ctx context.Context, limit, offset int) (*List${1:Entity}Output, error)",
            "}",
            "",
            "// Create${1:Entity}Input representa los datos de entrada para crear un ${1:Entity}",
            "type Create${1:Entity}Input struct {",
            "\t${2:Name} string `json:\"${3:name}\"`",
            "}",
            "",
            "// Create${1:Entity}Output representa los datos de salida después de crear un ${1:Entity}",
            "type Create${1:Entity}Output struct {",
            "\tID string `json:\"id\"`",
            "\t${2:Name} string `json:\"${3:name}\"`",
            "}",
            ""
        ],
        "description": "Crear una interfaz de caso de uso con DTOs"
    },
    "Goca REST Handler": {
        "prefix": "goca-rest-handler",
        "body": [
            "package handler",
            "",
            "import (",
            "\t\"net/http\"",
            "\t\"encoding/json\"",
            "\t\"${1:github.com/usuario/proyecto}/internal/usecase\"",
            ")",
            "",
            "// ${2:Entity}Handler maneja las peticiones HTTP para ${2:Entity}",
            "type ${2:Entity}Handler struct {",
            "\t${3:entity}UseCase usecase.${2:Entity}UseCase",
            "}",
            "",
            "// New${2:Entity}Handler crea un nuevo handler para ${2:Entity}",
            "func New${2:Entity}Handler(useCase usecase.${2:Entity}UseCase) *${2:Entity}Handler {",
            "\treturn &${2:Entity}Handler{",
            "\t\t${3:entity}UseCase: useCase,",
            "\t}",
            "}",
            "",
            "// Create maneja la creación de un ${2:Entity}",
            "func (h *${2:Entity}Handler) Create(w http.ResponseWriter, r *http.Request) {",
            "\tvar input usecase.Create${2:Entity}Input",
            "",
            "\tif err := json.NewDecoder(r.Body).Decode(&input); err != nil {",
            "\t\thttp.Error(w, \"Error al decodificar el cuerpo de la petición\", http.StatusBadRequest)",
            "\t\treturn",
            "\t}",
            "",
            "\toutput, err := h.${3:entity}UseCase.Create(r.Context(), input)",
            "\tif err != nil {",
            "\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)",
            "\t\treturn",
            "\t}",
            "",
            "\tw.Header().Set(\"Content-Type\", \"application/json\")",
            "\tw.WriteHeader(http.StatusCreated)",
            "\tjson.NewEncoder(w).Encode(output)",
            "}",
            ""
        ],
        "description": "Crear un handler REST"
    },
    "Goca DI Container": {
        "prefix": "goca-di-container",
        "body": [
            "package di",
            "",
            "import (",
            "\t\"${1:github.com/usuario/proyecto}/internal/repository\"",
            "\t\"${1:github.com/usuario/proyecto}/internal/usecase\"",
            "\t\"${1:github.com/usuario/proyecto}/internal/handler\"",
            ")",
            "",
            "// Container contiene todas las dependencias de la aplicación",
            "type Container struct {",
            "\t// Repositorios",
            "\t${2:Entity}Repository repository.${2:Entity}Repository",
            "",
            "\t// Casos de uso",
            "\t${2:Entity}UseCase usecase.${2:Entity}UseCase",
            "",
            "\t// Handlers",
            "\t${2:Entity}Handler *handler.${2:Entity}Handler",
            "}",
            "",
            "// NewContainer crea un nuevo contenedor de dependencias",
            "func NewContainer() *Container {",
            "\tcontainer := &Container{}",
            "",
            "\t// Inicializar repositorios",
            "\tcontainer.${2:Entity}Repository = repository.New${2:Entity}Repository()",
            "",
            "\t// Inicializar casos de uso",
            "\tcontainer.${2:Entity}UseCase = usecase.New${2:Entity}UseCase(container.${2:Entity}Repository)",
            "",
            "\t// Inicializar handlers",
            "\tcontainer.${2:Entity}Handler = handler.New${2:Entity}Handler(container.${2:Entity}UseCase)",
            "",
            "\treturn container",
            "}",
            ""
        ],
        "description": "Crear un contenedor de inyección de dependencias"
    }
}